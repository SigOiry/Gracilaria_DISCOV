sd = sd(mean_RAW, na.rm=T))
chla= 678
PE = 565
PC = 625
a <- ggplot(result_df) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
# Example parameters for Savitzky-Golay (adjust as needed)
p <- 5      # polynomial order
n <- 11     # frame length (must be an odd number, e.g. 11)
# Assuming your initial dataframe is called df
# df: first column is wavelength, subsequent columns are spectra
wavelength <- df[[1]]
reflectances <- df[,-1]
# Compute wavelength spacing
d_lambda <- wavelength[2] - wavelength[1]
# 1. Perform an initial Savitzky-Golay smoothing on each spectrum
smooth_spectra <- apply(reflectances, 2, sgolayfilt, p = p, n = n)
# Define a function to compute a first derivative using central differences
first_derivative <- function(x, d) {
n <- length(x)
d1 <- numeric(n)
d1[2:(n-1)] <- (x[3:n] - x[1:(n-2)]) / (2*d)
d1[1] <- NA
d1[n] <- NA
return(d1)
}
# 2. Compute the first derivative from the smoothed spectra
d1_spectra <- apply(smooth_spectra, 2, first_derivative, d = d_lambda)
# 3. Smooth the first derivative again using Savitzky-Golay
d1_spectra_smooth <- apply(d1_spectra, 2, function(x) {
# Replace NAs at the edges with nearest available values for smoothing
x[1] <- x[which(!is.na(x))[1]]
x[length(x)] <- x[rev(which(!is.na(x)))[1]]
sgolayfilt(x, p = p, n = n)
})
# Define a function to compute a second derivative using central differences
second_derivative <- function(x, d) {
n <- length(x)
d2 <- numeric(n)
d2[2:(n-1)] <- (x[3:n] - 2*x[2:(n-1)] + x[1:(n-2)]) / (d^2)
d2[1] <- NA
d2[n] <- NA
return(d2)
}
# 4. Compute the second derivative from the smoothed first derivative
d2_spectra <- apply(d1_spectra_smooth, 2, second_derivative, d = d_lambda)
d2_spectra_smooth <- apply(d2_spectra, 2, sgolayfilt, p = p, n = n)
# Combine results into a final dataframe
result_df <- cbind(wavelength, d2_spectra_smooth) %>%
as_tibble() %>%
pivot_longer(-wavelength, names_to = "spectra", values_to = "deriv") %>%
group_by(wavelength) %>%
reframe(mean = mean(deriv, na.rm = T),
sd = sd(deriv, na.rm=T))
df_spectra <- csv_files %>%
lapply(read.csv) %>%  # Read each CSV file into a list of dataframes
bind_rows() %>%         # Combine all dataframes into one
dplyr::filter(Letter == "Field")%>%
group_by(Wavelength) %>%
reframe(mean = mean(mean_RAW, na.rm = T),
sd = sd(mean_RAW, na.rm=T))
chla= 678
PE = 565
PC = 625
a <- ggplot(result_df) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
# Example parameters for Savitzky-Golay (adjust as needed)
p <- 3      # polynomial order
n <- 11     # frame length (must be an odd number, e.g. 11)
# Assuming your initial dataframe is called df
# df: first column is wavelength, subsequent columns are spectra
wavelength <- df[[1]]
reflectances <- df[,-1]
# Compute wavelength spacing
d_lambda <- wavelength[2] - wavelength[1]
# 1. Perform an initial Savitzky-Golay smoothing on each spectrum
smooth_spectra <- apply(reflectances, 2, sgolayfilt, p = p, n = n)
# Define a function to compute a first derivative using central differences
first_derivative <- function(x, d) {
n <- length(x)
d1 <- numeric(n)
d1[2:(n-1)] <- (x[3:n] - x[1:(n-2)]) / (2*d)
d1[1] <- NA
d1[n] <- NA
return(d1)
}
# 2. Compute the first derivative from the smoothed spectra
d1_spectra <- apply(smooth_spectra, 2, first_derivative, d = d_lambda)
# 3. Smooth the first derivative again using Savitzky-Golay
d1_spectra_smooth <- apply(d1_spectra, 2, function(x) {
# Replace NAs at the edges with nearest available values for smoothing
x[1] <- x[which(!is.na(x))[1]]
x[length(x)] <- x[rev(which(!is.na(x)))[1]]
sgolayfilt(x, p = p, n = n)
})
# Define a function to compute a second derivative using central differences
second_derivative <- function(x, d) {
n <- length(x)
d2 <- numeric(n)
d2[2:(n-1)] <- (x[3:n] - 2*x[2:(n-1)] + x[1:(n-2)]) / (d^2)
d2[1] <- NA
d2[n] <- NA
return(d2)
}
# 4. Compute the second derivative from the smoothed first derivative
d2_spectra <- apply(d1_spectra_smooth, 2, second_derivative, d = d_lambda)
d2_spectra_smooth <- apply(d2_spectra, 2, sgolayfilt, p = p, n = n)
# Combine results into a final dataframe
result_df <- cbind(wavelength, d2_spectra_smooth) %>%
as_tibble() %>%
pivot_longer(-wavelength, names_to = "spectra", values_to = "deriv") %>%
group_by(wavelength) %>%
reframe(mean = mean(deriv, na.rm = T),
sd = sd(deriv, na.rm=T))
df_spectra <- csv_files %>%
lapply(read.csv) %>%  # Read each CSV file into a list of dataframes
bind_rows() %>%         # Combine all dataframes into one
dplyr::filter(Letter == "Field")%>%
group_by(Wavelength) %>%
reframe(mean = mean(mean_RAW, na.rm = T),
sd = sd(mean_RAW, na.rm=T))
chla= 678
PE = 565
PC = 625
a <- ggplot(result_df) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
chla= 678
PE = 575
PC = 635
a <- ggplot(result_df) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
# User-defined parameters
p <- 3      # polynomial order for Savitzky-Golay
n <- 11     # frame length (odd number, e.g. 11)
factor <- 5 # degrade resolution by a factor of 5
# Assuming your initial dataframe is called df
# df: first column is wavelength, subsequent columns are spectra
wavelength <- df[[1]]
reflectances <- df[,-1]
# Compute original wavelength spacing
d_lambda <- wavelength[2] - wavelength[1]
# 1. Degrade the spectral resolution
# Create a new wavelength vector with coarser spacing
new_wavelength <- seq(from = min(wavelength), to = max(wavelength), by = factor * d_lambda)
# Interpolate the spectra onto the new wavelength grid
degraded_spectra <- apply(reflectances, 2, function(spec) {
approx(x = wavelength, y = spec, xout = new_wavelength)$y
})
# Now our working wavelength and reflectances become:
wavelength <- new_wavelength
reflectances <- degraded_spectra
# Update the spacing to reflect the new degraded resolution
d_lambda <- wavelength[2] - wavelength[1]
# 2. Perform initial Savitzky-Golay smoothing on each degraded-resolution spectrum
smooth_spectra <- apply(reflectances, 2, sgolayfilt, p = p, n = n)
# Define a function for first derivative using central differences
first_derivative <- function(x, d) {
n <- length(x)
d1 <- numeric(n)
d1[2:(n-1)] <- (x[3:n] - x[1:(n-2)]) / (2*d)
d1[1] <- NA
d1[n] <- NA
return(d1)
}
# 3. Compute the first derivative from the smoothed spectra
d1_spectra <- apply(smooth_spectra, 2, first_derivative, d = d_lambda)
# Helper function to safely smooth a vector that may have NAs at boundaries
safe_sgolay <- function(x, p, n) {
# Replace NAs at edges with nearest non-NA values before smoothing
if (is.na(x[1])) {
first_valid <- which(!is.na(x))[1]
x[1:(first_valid-1)] <- x[first_valid]
}
if (is.na(x[length(x)])) {
last_valid <- rev(which(!is.na(x)))[1]
x[(last_valid+1):length(x)] <- x[last_valid]
}
sgolayfilt(x, p = p, n = n)
}
# 4. Smooth the first derivative again using Savitzky-Golay
d1_spectra_smooth <- apply(d1_spectra, 2, safe_sgolay, p = p, n = n)
# Define a function for second derivative using central differences
second_derivative <- function(x, d) {
n <- length(x)
d2 <- numeric(n)
d2[2:(n-1)] <- (x[3:n] - 2*x[2:(n-1)] + x[1:(n-2)]) / (d^2)
d2[1] <- NA
d2[n] <- NA
return(d2)
}
# 5. Compute the second derivative from the smoothed first derivative
d2_spectra <- apply(d1_spectra_smooth, 2, second_derivative, d = d_lambda)
# 6. Finally, smooth the second derivative again using Savitzky-Golay
d2_spectra_smooth <- apply(d2_spectra, 2, safe_sgolay, p = p, n = n)
# Combine results into a final dataframe
result_df <- data.frame(wavelength = wavelength, d2_spectra_smooth) %>%
as_tibble() %>%
pivot_longer(-wavelength, names_to = "spectra", values_to = "deriv") %>%
group_by(wavelength) %>%
reframe(mean = mean(deriv, na.rm = T),
sd = sd(deriv, na.rm=T))
df_spectra <- csv_files %>%
lapply(read.csv) %>%  # Read each CSV file into a list of dataframes
bind_rows() %>%         # Combine all dataframes into one
dplyr::filter(Letter == "Field")%>%
group_by(Wavelength) %>%
reframe(mean = mean(mean_RAW, na.rm = T),
sd = sd(mean_RAW, na.rm=T))
chla= 678
PE = 575
PC = 635
a <- ggplot(result_df) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
b
df_spectra <- csv_files %>%
lapply(read.csv) %>%  # Read each CSV file into a list of dataframes
bind_rows() %>%         # Combine all dataframes into one
dplyr::filter(Letter == "Field")%>%
group_by(Wavelength) %>%
reframe(mean = mean(mean_RAW, na.rm = T),
sd = sd(mean_RAW, na.rm=T))
b <- ggplot(df_spectra) +
geom_line(aes(x = wavelength, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
b
df_spectra
ggplot(df_spectra) +
geom_line(aes(x = wavelength, y = mean))
df_spectra
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
chla= 678
PE = 565
PC = 625
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
xlim(400, 900)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
PC = 615
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
xlim(400, 900)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
PC = 620
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
xlim(400, 900)+
theme_Bede()
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
xlim(400, 900)+
theme_Bede()+
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
theme_Bede()
(a)/(b)
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
ylab("Reflectance")+
theme_Bede()
(a)/(b)
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
xlim(400, 900)+
theme_Bede()+
ylab("Second derivative")+
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
ylab("Reflectance")+
theme_Bede()
(a)/(b)
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
xlim(400, 900)+
theme_Bede()+
ylab("Second derivative")+
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank();
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
ylab("Reflectance")+
theme_Bede()
(a)/(b)
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
xlim(400, 900)+
theme_Bede()+
ylab("Second derivative")+
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank();
a <- ggplot(result_df) +
geom_line(aes(x = wavelength+10, y = mean))+
geom_ribbon(aes(x = wavelength+10, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+
geom_vline(xintercept = PC)+
xlim(400, 900)+
theme_Bede()+
ylab("Second derivative")+
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()
)
b <- ggplot(df_spectra) +
geom_line(aes(x = Wavelength, y = mean))+
geom_ribbon(aes(x = Wavelength, y = mean, ymin = mean-sd, ymax = mean+sd), alpha = 0.05)+
geom_vline(xintercept = chla)+ # chl-a
geom_vline(xintercept = PE)+ #
geom_vline(xintercept = PC)+
ylab("Reflectance")+
theme_Bede()
(a)/(b)
(a)/(b)
