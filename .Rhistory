writeLines(c(gitignore_content, files_to_add), gitignore_path)
message(length(files_to_add), " file(s) added to .gitignore.")
} else {
message("No new files to add to .gitignore.")
}
} else {
message("No files larger than 100 MB found.")
}
# Step 3: Commit and push changes to Git
message("Committing and pushing changes to Git...")
system("git add .")
system(paste("git commit -m", shQuote(commit_message)), ignore.stdout = TRUE, ignore.stderr = TRUE)
system("git push", ignore.stdout = TRUE, ignore.stderr = TRUE)
message("Changes pushed to Git.")
} else {
message("Push option set to FALSE. Skipping Git steps.")
}
}
render_and_git <- function(push = F, path = NULL, commit_message = "adding updates") {
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Determine the project folder
project_folder <- if (is.null(path)) getwd() else dirname(path)
# Save the current working directory
original_wd <- getwd()
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(basename(path)))
}
# Change to the project folder
setwd(project_folder)
on.exit(setwd(original_wd), add = TRUE) # Ensure the original directory is restored
# Run the render command
tryCatch({
message("Rendering the Quarto project in: ", project_folder)
system(render_command, intern = TRUE)
message("Rendering complete.")
}, error = function(e) {
message("An error occurred during rendering: ", e$message)
stop("Rendering failed.")
})
# Step 2: If push is TRUE, update .gitignore and push to Git
if (push) {
# Update .gitignore with files larger than 100 MB
library(fs)
size_threshold <- 100 * 1024 * 1024  # 100 MB
message("Checking for large files to add to .gitignore...")
files <- dir_ls(recursive = TRUE, type = "file")
large_files <- files[file_info(files)$size > size_threshold]
if (length(large_files) > 0) {
gitignore_path <- ".gitignore"
gitignore_content <- if (file_exists(gitignore_path)) {
readLines(gitignore_path)
} else {
character(0)
}
files_to_add <- large_files[!large_files %in% gitignore_content]
if (length(files_to_add) > 0) {
writeLines(c(gitignore_content, files_to_add), gitignore_path)
message(length(files_to_add), " file(s) added to .gitignore.")
} else {
message("No new files to add to .gitignore.")
}
} else {
message("No files larger than 100 MB found.")
}
# Step 3: Commit and push changes to Git
message("Committing and pushing changes to Git...")
system("git add .")
system(paste("git commit -m", shQuote(commit_message)), ignore.stdout = TRUE, ignore.stderr = TRUE)
system("git push", ignore.stdout = TRUE, ignore.stderr = TRUE)
message("Changes pushed to Git.")
} else {
message("Push option set to FALSE. Skipping Git steps.")
}
}
render_and_git()
render_command
push = F
path = NULL
commit_message = "adding updates"
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Determine the project folder
project_folder <- if (is.null(path)) getwd() else dirname(path)
project_folder
# Save the current working directory
original_wd <- getwd()
original_wd
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(basename(path)))
}
render_command
# Change to the project folder
setwd(project_folder)
on.exit(setwd(original_wd), add = TRUE)
render_command
system(render_command, intern = TRUE)
render_and_git <- function(push = F, path = NULL, commit_message = "adding updates") {
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(path))
}
message("Rendering the Quarto project...")
system(render_command, intern = TRUE)
message("Rendering complete.")
# Step 2: If push is TRUE, update .gitignore and push to Git
if (push) {
# Update .gitignore with files larger than 100 MB
library(fs)
size_threshold <- 100 * 1024 * 1024  # 100 MB
message("Checking for large files to add to .gitignore...")
files <- dir_ls(recursive = TRUE, type = "file")
large_files <- files[file_info(files)$size > size_threshold]
if (length(large_files) > 0) {
gitignore_path <- ".gitignore"
gitignore_content <- if (file_exists(gitignore_path)) {
readLines(gitignore_path)
} else {
character(0)
}
files_to_add <- large_files[!large_files %in% gitignore_content]
if (length(files_to_add) > 0) {
writeLines(c(gitignore_content, files_to_add), gitignore_path)
message(length(files_to_add), " file(s) added to .gitignore.")
} else {
message("No new files to add to .gitignore.")
}
} else {
message("No files larger than 100 MB found.")
}
# Step 3: Commit and push changes to Git
message("Committing and pushing changes to Git...")
system("git add .")
system(paste("git commit -m", shQuote(commit_message)), ignore.stdout = TRUE, ignore.stderr = TRUE)
system("git push", ignore.stdout = TRUE, ignore.stderr = TRUE)
message("Changes pushed to Git.")
} else {
message("Push option set to FALSE. Skipping Git steps.")
}
}
render_and_git("paper")
render_and_git <- function(path = NULL,push = F, commit_message = "adding updates") {
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(path))
}
message("Rendering the Quarto project...")
system(render_command, intern = TRUE)
message("Rendering complete.")
# Step 2: If push is TRUE, update .gitignore and push to Git
if (push) {
# Update .gitignore with files larger than 100 MB
library(fs)
size_threshold <- 100 * 1024 * 1024  # 100 MB
message("Checking for large files to add to .gitignore...")
files <- dir_ls(recursive = TRUE, type = "file")
large_files <- files[file_info(files)$size > size_threshold]
if (length(large_files) > 0) {
gitignore_path <- ".gitignore"
gitignore_content <- if (file_exists(gitignore_path)) {
readLines(gitignore_path)
} else {
character(0)
}
files_to_add <- large_files[!large_files %in% gitignore_content]
if (length(files_to_add) > 0) {
writeLines(c(gitignore_content, files_to_add), gitignore_path)
message(length(files_to_add), " file(s) added to .gitignore.")
} else {
message("No new files to add to .gitignore.")
}
} else {
message("No files larger than 100 MB found.")
}
# Step 3: Commit and push changes to Git
message("Committing and pushing changes to Git...")
system("git add .")
system(paste("git commit -m", shQuote(commit_message)), ignore.stdout = TRUE, ignore.stderr = TRUE)
system("git push", ignore.stdout = TRUE, ignore.stderr = TRUE)
message("Changes pushed to Git.")
} else {
message("Push option set to FALSE. Skipping Git steps.")
}
}
render_and_git("paper")
path = "paper"
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(path))
}
render_command
paste("quarto render",path)
render_and_git <- function(path = NULL,push = F, commit_message = "adding updates") {
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render",path)
}
message("Rendering the Quarto project...")
system(render_command, intern = TRUE)
message("Rendering complete.")
# Step 2: If push is TRUE, update .gitignore and push to Git
if (push) {
# Update .gitignore with files larger than 100 MB
library(fs)
size_threshold <- 100 * 1024 * 1024  # 100 MB
message("Checking for large files to add to .gitignore...")
files <- dir_ls(recursive = TRUE, type = "file")
large_files <- files[file_info(files)$size > size_threshold]
if (length(large_files) > 0) {
gitignore_path <- ".gitignore"
gitignore_content <- if (file_exists(gitignore_path)) {
readLines(gitignore_path)
} else {
character(0)
}
files_to_add <- large_files[!large_files %in% gitignore_content]
if (length(files_to_add) > 0) {
writeLines(c(gitignore_content, files_to_add), gitignore_path)
message(length(files_to_add), " file(s) added to .gitignore.")
} else {
message("No new files to add to .gitignore.")
}
} else {
message("No files larger than 100 MB found.")
}
# Step 3: Commit and push changes to Git
message("Committing and pushing changes to Git...")
system("git add .")
system(paste("git commit -m", shQuote(commit_message)), ignore.stdout = TRUE, ignore.stderr = TRUE)
system("git push", ignore.stdout = TRUE, ignore.stderr = TRUE)
message("Changes pushed to Git.")
} else {
message("Push option set to FALSE. Skipping Git steps.")
}
}
render_and_git("paper")
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render",path)
}
render_command
message("Rendering the Quarto project...")
system(render_command, intern = TRUE)
render_and_git("paper")
system(render_command, intern = TRUE)
system(render_command, shell = "cmd",intern = TRUE)
system(render_command, shell = "cmd",intern = TRUE, wait = T)
system(render_command,intern = TRUE, wait = T)
render_and_git <- function(path = NULL,push = F, commit_message = "adding updates") {
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render",path)
}
message("Rendering the Quarto project...")
system(render_command,intern = TRUE, wait = T)
message("Rendering complete.")
# Step 2: If push is TRUE, update .gitignore and push to Git
if (push) {
# Update .gitignore with files larger than 100 MB
library(fs)
size_threshold <- 100 * 1024 * 1024  # 100 MB
message("Checking for large files to add to .gitignore...")
files <- dir_ls(recursive = TRUE, type = "file")
large_files <- files[file_info(files)$size > size_threshold]
if (length(large_files) > 0) {
gitignore_path <- ".gitignore"
gitignore_content <- if (file_exists(gitignore_path)) {
readLines(gitignore_path)
} else {
character(0)
}
files_to_add <- large_files[!large_files %in% gitignore_content]
if (length(files_to_add) > 0) {
writeLines(c(gitignore_content, files_to_add), gitignore_path)
message(length(files_to_add), " file(s) added to .gitignore.")
} else {
message("No new files to add to .gitignore.")
}
} else {
message("No files larger than 100 MB found.")
}
# Step 3: Commit and push changes to Git
message("Committing and pushing changes to Git...")
system("git add .")
system(paste("git commit -m", shQuote(commit_message)), ignore.stdout = TRUE, ignore.stderr = TRUE)
system("git push", ignore.stdout = TRUE, ignore.stderr = TRUE)
message("Changes pushed to Git.")
} else {
message("Push option set to FALSE. Skipping Git steps.")
}
}
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(path))
}
message("Rendering the Quarto project...")
render_status <- system(render_command, intern = TRUE, wait = TRUE)
render_status
render_status <- shell(render_command, intern = TRUE, wait = TRUE)
render_status
render_status <- shell(render_command, intern = TRUE, wait = TRUE)
render_command
# Step 1: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render",path)
}
render_command
render_status <- shell(render_command, intern = TRUE, wait = TRUE)
render_status
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Check if Git is properly configured
message("Checking Git configuration...")
git_status <- shell("git status", intern = TRUE, ignore.stderr = TRUE)
git_status
git_status <- system("git status", intern = TRUE, ignore.stderr = TRUE)
git_status
if (any(grepl("fatal", git_status, ignore.case = TRUE))) {
stop("Git is not properly configured. Ensure you are in a Git repository and Git is installed.")
} else {
message("Git is properly configured.")
}
# Step 2: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(path))
}
render_command
paste("quarto render", path)
message("Rendering the Quarto project...")
shell(render_command, intern = TRUE, wait = TRUE)
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Check if Quarto is installed and accessible
message("Checking Quarto installation...")
quarto_check <- shell("quarto --version", intern = TRUE, ignore.stderr = TRUE)
if (length(quarto_check) == 0) {
stop("Quarto is not installed or not available in the system PATH. Install Quarto or update your PATH.")
} else {
message("Quarto is installed: ", quarto_check)
}
# Step 2: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(path))
}
message("Rendering the Quarto project...")
render_output <- shell(render_command, intern = TRUE, ignore.stderr = FALSE)
if (any(grepl("ERROR", render_output, ignore.case = TRUE))) {
stop("Rendering failed. Details:\n", paste(render_output, collapse = "\n"))
} else {
message("Rendering complete.")
}
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Check if Quarto is installed and accessible
message("Checking Quarto installation...")
quarto_check <- shell("quarto --version", intern = TRUE, ignore.stderr = TRUE)
if (length(quarto_check) == 0) {
stop("Quarto is not installed or not available in the system PATH. Install Quarto or update your PATH.")
} else {
message("Quarto is installed: ", quarto_check)
}
# Step 2: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(path))
}
message("Rendering the Quarto project...")
render_output <- shell(render_command, intern = TRUE, ignore.stderr = FALSE)
if (any(grepl("ERROR", render_output, ignore.case = TRUE))) {
stop("Rendering failed. Details:\n", paste(render_output, collapse = "\n"))
} else {
message("Rendering complete.")
}
render_output
# Check if the push argument is a logical value
if (!is.logical(push)) {
stop("The 'push' argument must be TRUE or FALSE.")
}
# Step 1: Check if Git is properly configured
message("Checking Git configuration...")
git_status <- shell("git status", intern = TRUE, ignore.stderr = TRUE)
if (any(grepl("fatal", git_status, ignore.case = TRUE))) {
stop("Git is not properly configured. Ensure you are in a Git repository and Git is installed.")
} else {
message("Git is properly configured.")
}
# Step 2: Check SSH key authentication
message("Checking SSH key authentication...")
ssh_check <- shell("ssh -T git@github.com", intern = TRUE, ignore.stderr = TRUE)
if (any(grepl("Permission denied", ssh_check))) {
stop("SSH authentication failed. Ensure your SSH key is added to the SSH agent and linked to your GitHub account.")
} else if (any(grepl("successfully authenticated", ssh_check, ignore.case = TRUE))) {
message("SSH authentication successful.")
} else {
message("SSH authentication result: ", paste(ssh_check, collapse = "\n"))
}
shell("ssh -T git@github.com", intern = TRUE, ignore.stderr = TRUE)
ssh_check <- system("ssh -T git@github.com", intern = TRUE, ignore.stderr = TRUE)
ssh_check
if (any(grepl("Permission denied", ssh_check))) {
stop("SSH authentication failed. Ensure your SSH key is added to the SSH agent and linked to your GitHub account.")
} else if (any(grepl("successfully authenticated", ssh_check, ignore.case = TRUE))) {
message("SSH authentication successful.")
} else {
message("SSH authentication result: ", paste(ssh_check, collapse = "\n"))
}
# Step 3: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", shQuote(path))
}
message("Rendering the Quarto project...")
render_output <- shell(render_command, intern = TRUE, ignore.stderr = TRUE)
if (any(grepl("ERROR", render_output, ignore.case = TRUE))) {
stop("Rendering failed. Details:\n", paste(render_output, collapse = "\n"))
} else {
message("Rendering complete.")
}
render_output
render_command
paste("quarto render", path)
# Step 3: Render the Quarto project
render_command <- if (is.null(path)) {
"quarto render"
} else {
paste("quarto render", path)
}
message("Rendering the Quarto project...")
render_output <- system(render_command, intern = TRUE, ignore.stderr = TRUE)
render_output
render_output <- system(render_command, intern = TRUE)
render_output
library(quarto)
install.packages("quarto")
library(quarto)
path
quarto::quarto_render(path)
quarto::quarto_render(paper)
quarto::quarto_render("paper")
quarto::quarto_render("paper", as_job = F)
quarto::is_using_quarto()
quarto::is_using_quarto(paper)
quarto::is_using_quarto("paper"*)
quarto::is_using_quarto("paper")
quarto::quarto_binary_sitrep()
quarto::quarto_inspect("paper")
quarto::quarto_version()
system(ls ~/.ssh)
system("ls ~/.ssh")
system("ls ~/.ssh",intern = T)
system("ls ~/.ssh",intern = T)
system("ls ~/.ssh",intern = TRUE)
system("ls ~/.ssh",intern = FALSE)
quarto_render("paper")
quarto_render("paper",as_job = FALSE)
